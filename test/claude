# batScript 语言完整规范

## 语言简介

batScript 是一种现代化的批处理脚本语言，专门为 Windows 环境设计。它将现代编程语言的优雅语法与批处理的实用性相结合，编译为原生的 .bat 文件执行。

### 设计理念
- **简单性优先**：语法清晰，学习成本低
- **类型安全**：静态类型系统，减少运行时错误  
- **向后兼容**：完全兼容现有批处理环境
- **实用导向**：专注解决实际的系统管理和自动化需求

### 文件扩展名
- 源文件：`.bs`
- 编译后：`.bat`

## 文件结构
```
[文档字符串]
[命名空间声明]
[模块导入]
[全局变量/常量声明]
[函数/过程定义]
[主程序代码]
```

## 注释系统

### 单行注释
```batscript
# 这是单行注释
let CONST: num = 42; # 行尾注释
```

### 多行注释
```batscript
/* 这是多行注释
   可以跨越多行 */
set var: str = "hello"; /* 内联多行注释 */
```

### 原生注释
```batscript
$$$ 这是原生注释，会在生成的.bat文件中保留为 @REM 这是原生注释
$$$ 用于在生成的批处理文件中留下说明
```

### 文档字符串
**文件开头：**
```batscript
/*
:description: 文件描述
:file: 文件名.bs
:author: 作者
:time: 时间
*/
```

**函数/过程前：**
```batscript
/*
:description: 函数描述
:param param1: 参数1描述
:param param2: 参数2描述
:return: 返回值描述
*/
```

## 命名空间系统

### 命名空间声明
```batscript
namespace MyNamespace;                 # 声明当前文件的命名空间
```

### 命名空间访问
```batscript
MyNamespace.someFunction();            # 调用其他命名空间的函数
MyNamespace.someProcedure();           # 调用其他命名空间的过程
```

## 模块系统

### 包导入
```batscript
lib PackageName;                       # 导入标准库包（增加一层命名空间）
lib PackageName => alias;              # 导入并别名
lib PackageName => _;                  # 导入到全局命名空间
pkg ../RelativePath.bs;                # 导入相对路径文件, 默认和文件名保持一致, 也可也重命名
```

### 导入后的访问
```batscript
lib Stdio;
Stdio.out("Hello");                    # 通过包名访问

lib Stdio => IO;  
IO.out("Hello");                       # 通过别名访问

lib Stdio => _;
out("Hello");                          # 直接访问
```

## 类型系统

### 基本类型
- `num` - 数字，默认值：0
- `str` - 字符串，默认值：""
- `bool` - 布尔值，默认值：false
- `arr<T>` - 类型T的一维数组，默认值：每项都是T的默认值

### 类型特性
- 静态类型：变量类型在声明时确定，不可变更
- 类型安全：编译时检查类型匹配
- 默认值：所有类型都有明确的默认值

## 变量和常量

### 变量声明
```batscript
set var_name: type;                    # 声明并使用默认值
set var_name: type = value;            # 声明并初始化
```

### 常量声明
```batscript
let CONST_NAME: type = value;          # 常量必须初始化
```

### 全局变量访问
```batscript
global var_name;                       # 在函数内访问全局变量
```

### 作用域规则
- **全局作用域**：文件级别声明的变量
- **函数作用域**：函数内声明的变量默认为局部变量
- **无 local 关键字**：函数内默认就是局部作用域

## 运算符

### 算术运算符
```batscript
+ - * /                               # 四则运算
%                                     # 百分号：50% = 0.5
```

### 比较运算符
```batscript
== ~=                                 # 等于、不等于
> >= < <=                             # 大于、大于等于、小于、小于等于
```

### 逻辑运算符
```batscript
and or not                            # 逻辑与、或、非
```

### 特殊运算符
```batscript
@var                                  # 取类型字符串
&iterable                             # 取可迭代体长度
!value                                # 取反（bool反向/num负数/可迭代体颠倒）
.. 									  # 可迭代体拼接
[]                                    # 索引访问
```

### 多元条件运算符
```batscript
condition1 | condition2 | ... | conditionN ? function_call();
# 从左到右检查条件，最早满足的条件触发函数调用
# 限制：不能嵌套，不能用于赋值，只能调用函数
```

## 控制流

### 条件语句
```batscript
if (condition)
{
    # 代码块
}
elif (condition)
{
    # 代码块
}
else
{
    # 代码块
}
```

### 循环语句

**while循环：**
```batscript
while (condition)
{
    # 代码块
    continue;                          # 继续下一次循环
    break;                             # 跳出循环
}
```

**迭代循环：**
```batscript
set element: str;                      # 必须先显式定义迭代变量
iterate element from iterable
{
    # 代码块
    # element 在每次迭代中被赋值
}
```

## 函数和过程

### 函数定义（有返回值）
```batscript
func function_name(param1: type1, param2: type2) -> return_type
{
    # 函数体
    return value;                      # 必须返回指定类型的值
}
```

### 过程定义（无返回值）
```batscript
proc procedure_name(param1: type1, param2: type2)
{
    # 过程体
    # 无需 return 语句
}
```

### 函数调用规则
- 函数/过程必须先声明后调用
- 支持命名空间限定调用
- 参数类型必须匹配

## 异常处理
```batscript
err "错误信息";                        # 抛出异常并终止程序
```

## 程序控制
```batscript
endprogram;                           # 结束程序
```

## 原生批处理嵌入

### 插入批处理文件
```batscript
insert BatchFile.bat;                 # 将批处理文件内容插入到此处
```

### 动态执行批处理
```batscript
run
{
    "echo hello",                     # 静态命令字符串
    variable_name;                    # 动态变量内容
}
```

## 标准库示例

### 标准输入输出
```batscript
lib Stdio;
Stdio.out("输出内容");                 # 标准输出
set input: str = Stdio.in();          # 标准输入
```

### 命令行工具
```batscript
lib Cmd;
Cmd.setTitle("窗口标题");
Cmd.setColor("颜色设置");
```

## 编码规范

### 命名约定
- **变量名**：小写+下划线（my_var）
- **常量名**：大写+下划线（MY_CONST）
- **函数/过程名**：小驼峰（myFunction）
- **文件名/命名空间**：大驼峰（MyNamespace）

### 格式约定
- **括号**：单独一行
- **符号**：前后添加空格
- **语句结尾**：每行必须以分号（;）结尾

### 禁用约定
- **保留标识符**：名称中不能包含四个连续下划线（____）

## 语法约束和限制

### 声明顺序
1. 命名空间声明必须在文件开头
2. 模块导入必须在命名空间声明之后
3. 函数/过程必须先声明后调用

### 类型约束
1. 所有变量必须先声明再使用
2. 变量类型不可变更
3. 函数必须返回指定类型的值
4. 数组类型必须指定元素类型

### 作用域约束
1. 函数内变量默认为局部作用域
2. 访问全局变量需要 global 关键字
3. 命名空间访问需要完整限定名

### 特殊约束
1. 迭代循环的 element 变量必须预先显式定义
2. 多元条件运算符不能嵌套、不能用于赋值
3. 常量必须在声明时初始化
4. 原生注释会保留到生成的 .bat 文件中

## 编译特性

- **静态编译**：.bs 文件编译为 .bat 文件
- **类型检查**：编译时进行完整的类型安全检查
- **优化**：生成高效的批处理代码
- **兼容性**：生成的 .bat 文件可在所有 Windows 系统运行
